{"id":"ejercicios/prototype.html","dependencies":[{"name":"C:\\Users\\ruben\\Desktop\\PLATZI\\Desarrollo WEB\\javascript-profesional\\package.json","includedInParent":true,"mtime":1629061460828}],"generated":{"html":"<html>\r\n  <head>\r\n    <title>Prototype</title>\r\n  </head>\r\n\r\n  <body>\r\n    <a href=\"/ejercicios/\">Go back</a>\r\n    <p><em>Abre la consola</em></p>\r\n    <script>// Un objeto comun y corriente\n// const zelda = {\n//     name:\"Zelda\",\n// }\n// zelda.saludar = function (){\n//     console.log(`Hola, soy ${this.name}`);\n// }\n// zelda.saludar();\n// // otro objeto mas\n// const link = {\n//     name:\"Link\",\n// }\n// link.saludar = function (){\n//     console.log(`Hola, soy ${this.name}`);\n// }\n// link.saludar();\n// Seamos un poco mas eficientes\n//     function Hero(name){\n//         const hero = {\n//             name:name\n//         }\n//     hero.saludar=function (){\n//         console.log(`Hola, soy ${this.name}`);\n//     };\n//     return hero;\n// }\n//     const zelda = Hero(\"Zelda\");\n//     zelda.saludar();\n//     const link = Hero(\"Link\");\n//     link.saludar();\n// Aun podemos mejorar m√°s y evitar tener que crear la misma funcion cada vez\n//     const heroMethods={\n//         saludar: function (){\n//             console.log(`Hola, soy ${this.name}`)\n//     },\n// };\n//     function Hero(name){\n//         const hero = {\n//             name:name,\n//         };\n//     hero.saludar=heroMethods.saludar;\n//     return hero;\n// }\n//     const zelda = Hero(\"Zelda\");\n//     zelda.saludar();\n//     const link = Hero(\"Link\");\n//     link.saludar();\n// Object.create\n//const nuevoObjeto = Object.create(objeto);\n//     const heroMethods={\n//         saludar: function (){\n//             console.log(`Soy super heroe ${this.name}`)\n//     },\n// };\n//     function Hero(name){\n//         const hero = Object.create(heroMethods);\n//         hero.name=name;\n//     return hero;\n// }\n//     const zelda = Hero(\"Zelda\");\n//     zelda.saludar();\n//     const link = Hero(\"Link\");\n//     link.saludar();\n// function Hero(name){\n//         const hero = Object.create(Hero.prototype);\n//         hero.name=name;\n//     return hero;\n// }\n//     Hero.prototype.saludar = function(){\n//         console.log(`Soy un superHeroina! ${this.name}`);\n//     }\n//     const zelda = Hero(\"Zelda\");\n//     zelda.saludar();\n//     const link = Hero(\"Link\");\n//     link.saludar();\n// Los metodos de hero dentro de un heronew es un atajo (azucar sintactica) para llevar Hero.prototype al objeto\nfunction Hero(name) {\n  //  = Object.create(Hero.prototype);\n  this.name = name;\n}\n\nHero.prototype.saludar = function () {\n  console.log(`New: ${this.name}`);\n};\n\nconst zelda = new Hero(\"Zelda\");\nzelda.saludar();\nconst link = new Hero(\"Link\");\nlink.saludar();</script>\r\n  </body>\r\n</html>\r\n"},"sourceMaps":null,"error":null,"hash":"85b9706a7f65acea098b9a4f8a822622","cacheData":{"env":{}}}